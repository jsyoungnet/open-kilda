plugins {
    id 'groovy'
    id 'com.adarshr.test-logger' version '2.1.1'
}

description = 'Functional-Tests'
dependencies {
    implementation(platform('org.springframework:spring-framework-bom:5.0.7.RELEASE'))

    implementation project(':test-library')

    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

    implementation 'org.codehaus.groovy:groovy-all:2.5.3'

    implementation 'org.apache.kafka:kafka-clients'
    implementation 'com.shazam:shazamcrest:0.9'
    implementation 'org.codehaus.gpars:gpars:1.2.1'
    implementation 'com.spotify:docker-client:8.9.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'

    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.glassfish:javax.el'

    implementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
    implementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    implementation 'com.athaydes:spock-reports:1.7.1'
    implementation 'net.jodah:failsafe'
    implementation 'org.hamcrest:hamcrest-all:1.3'
    implementation ('org.apache.zookeeper:zookeeper:3.4.0') {
        exclude(group: 'org.slf4j', module: 'slf4j-log4j12')
        exclude(group: 'log4j', module: 'log4j')
    }
}

test {
    include '**/unit/spec/**/*Spec.*'
}

task functionalTest(type: Test, dependsOn: 'compileGroovy') {
    description = 'Runs functional tests.'
    include '**/functionaltests/spec/**/*Spec.*'
    if (System.getProperty('excludeTests')) {
        def excludes = System.getProperty('excludeTests').split(',')
        excludes.each {
            def excludeTerm = "**/${it.trim()}*"
            logger.info "exclude $excludeTerm"
            exclude excludeTerm
         }
    }

    systemProperty 'tags', System.getProperty('tags')

    Properties properties = new Properties()
    File propertiesFile = file("kilda.properties.example")
    propertiesFile.withInputStream {
        properties.load(it)
    }
    properties.keys().each { k ->
        if (System.getProperty(k)) {
            systemProperty k, System.getProperty(k)
        }
    }
}

task runTest(type: Test) {
    //usually used together with `--tests`
    description = 'Includes all tests from functional-tests module.'
    include '**/functionaltests/**'
    systemProperty 'tags', System.getProperty('tags')
}

tasks.withType(Test) {
    outputs.upToDateWhen { false } //never cache results of functional tests
}

testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
    showFullStackTraces true
    showCauses true
    slowThreshold 90 * 1000
    showSummary true
    showSimpleNames true
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
}